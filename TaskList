Tarefas migradas e consolidadas de https://github.com/ErickAlcan/W2PP/tree/master/Code/DBSrv

# Task List - DBSrv (Revisada)

## 1. Arquitetura e Refatoração
- [ ] **INCOMPLETO:** Criar ou completar um *registry pattern* para associar IDs de pacotes a funções de tratamento, eliminando a necessidade de `switch/case`.
- [ ] **from-W2PP:** Mapear e encapsular (ou eliminar) as variáveis globais do projeto original (ex: `Sapphire`, `g_pGuildWar`) dentro das novas classes de gerenciamento. (Origem: `Server.h`)

## 2. Configuração e Inicialização
- [ ] **INCOMPLETO:** Implementar uma rotina de debug para exibir as configurações carregadas no console (`DrawConfig` do original).
- [ ] **INCOMPLETO:** Validar a leitura do arquivo `Admin.txt` e o carregamento das permissões de administrador.
- [ ] **from-W2PP:** Implementar o carregamento dos status base das classes/mobs a partir da pasta `BaseMob`. (Origem: `Server.cpp`, função `WinMain`)

## 3. Gerenciamento de Contas e Personagens
- [ ] **from-W2PP:** Implementar a criação (`AddAccount`), atualização (`UpdateAccount`) e verificação de nomes (`DBCheckImpleName`) de contas. (Origem: `CFileDB.cpp`)
- [ ] **from-W2PP:** Implementar a funcionalidade de obter os dados para a tela de seleção de personagem (`DBGetSelChar`). (Origem: `CFileDB.cpp`)
- [ ] **from-W2PP:** Implementar o sistema de senhas seguras (`GetEncPassword`, `SetEncPassword`). (Origem: `CFileDB.cpp`)
- [ ] **from-W2PP:** Adicionar a funcionalidade para rastrear contas por MAC address (`GetAccountsByMac`) e o sistema de "conta primária". (Origem: `CFileDB.cpp`)

## 4. Sistema de Guildas
- [ ] **from-W2PP:** Implementar as mecânicas de guerra (`_MSG_War`) e aliança (`_MSG_GuildAlly`) entre guildas. (Origem: `CFileDB.cpp`)
- [ ] **from-W2PP:** Implementar o recebimento de "guild zone reports" e a retransmissão da informação para os demais servidores. (Origem: `CFileDB.cpp`, case `_MSG_GuildZoneReport`)
- [ ] **from-W2PP:** Implementar o reset semanal da fama (fame) das guildas. (Origem: `Server.cpp`, função `ProcessSecTimer`)

## 5. Sincronização e Integração
- [ ] **from-W2PP:** Implementar o sistema de "redirecionamento" via `redirect.txt` para transferência de personagens entre servidores. (Origem: `Server.cpp`, função `WinMain`)
- [ ] **from-W2PP:** Implementar a troca de servidor por um jogador (`_MSG_DBServerChange`), incluindo a geração de chaves de segurança temporárias. (Origem: `CFileDB.cpp`)
- [ ] **from-W2PP:** Replicar o mecanismo de importação (contas, itens, donates) baseado em arquivos depositados em diretórios `Common`. (Origem: `CReadFiles.cpp`)
- [ ] **from-W2PP:** Implementar a atualização de senhas de contas a partir de arquivos (`UpdateUser`). (Origem: `CReadFiles.cpp`)
- [ ] **from-W2PP:** Criar rotina para gerar arquivos de status de conexão para serem lidos por um painel web. (Origem: `CReadFiles.cpp`, `UpdateConnection`)

## 6. Funcionalidades de Jogo (Gameplay)
- [ ] **from-W2PP:** Implementar o sistema de "Cápsulas de Personagem" (encapsular, ler e restaurar). (Origem: `CFileDB.cpp`, cases `_MSG_DBPutInCapsule`, `_MSG_DBCapsuleInfo`, `_MSG_DBOutCapsule`)
- [ ] **from-W2PP:** Implementar a "Trombeta Mágica" (`_MSG_MagicTrumpet`) para envio de mensagens globais. (Origem: `CFileDB.cpp`)
- [ ] **from-W2PP:** Adicionar a lógica de "troca de nome" de personagem no login, baseada em itens específicos. (Origem: `CFileDB.cpp`, case `_MSG_DBAccountLogin`)

## 7. Logging e Timers
- [ ] **INCOMPLETO:** Implementar `DayLog_ReadAccountInDir` para gerar logs diários de ganho de experiência. (Origem: `Server.cpp`)
- [ ] **from-W2PP:** Implementar a função `ProcessRecord` para salvar logs detalhados de operações específicas. (Origem: `CFileDB.cpp`)
- [ ] **INCOMPLETO:** Implementar um timer de minuto (`ProcessMinTimer`) e refinar o timer de segundo (`ProcessSecTimer`/`periodicUpdate`).

## 8. Build e Utilitários
- [ ] **INCOMPLETO:** Incluir um target de testes unitários no `CMakeLists.txt`.
- [ ] **INCOMPLETO:** Implementar uma função genérica `file_exists` para verificação de existência de arquivos.
